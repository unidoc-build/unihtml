//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package sizes defines basic types that determines the size units i.e. lengths.
//
//
package sizes ;import (_d "encoding/json";_aa "flag";_cb "fmt";_c "strconv";_g "strings";);

// Type implements pflag.Value interface.
func (_fbf PageSize )Type ()string {return "\u0070a\u0067\u0065\u002d\u0073\u0069\u007ae"};var _ Length =Inch (0);

// Points implements Length interface.
func (_edc Millimeter )Points ()Point {return Point (_edc *_b )};

// Points implements Length interface.
func (_ccb Inch )Points ()Point {return Point (float64 (_ccb )*_gb )};

// Points implements Length interface.
func (_dd Point )Points ()Point {return _dd };

// String gets the string value for given flag.
func (_bf *LengthFlag )String ()string {if _bf .Length ==nil {return "\u0075n\u0064\u0065\u0066\u0069\u006e\u0065d";};return _bf .Length .String ();};

// Set implements flag.Value interface.
func (_ae *Point )Set (s string )error {_fed ,_bfe :=_c .ParseFloat (s ,64);if _bfe !=nil {return _cb .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0069\u006e\u0063\u0068\u0020\u0076\u0061\u006c\u0075\u0065\u003a\u0020%\u0077",_bfe );};*_ae =Point (_fed );
return nil ;};

// Set implements flag.Value interface.
func (_bg *Orientation )Set (s string )error {switch s {case "\u0070\u006f\u0072\u0074\u0072\u0061\u0069\u0074":*_bg =Portrait ;case "\u006ca\u006e\u0064\u0073\u0063\u0061\u0070e":*_bg =Landscape ;default:return _cb .Errorf ("\u0069n\u0076\u0061\u006c\u0069d\u0020\u006f\u0072\u0069\u0065n\u0074a\u0074i\u006f\u006e\u003a\u0020\u0027\u0025\u0073'",s );
};return nil ;};

// IsAPageSize returns "true" if the value is listed in the enum definition. "false" otherwise
func (_ffc PageSize )IsAPageSize ()bool {for _ ,_eee :=range _cee {if _ffc ==_eee {return true ;};};return false ;};

// Length is it the default dimension unit.
type Length interface{Millimeters ()Millimeter ;Inches ()Inch ;Points ()Point ;String ()string ;};

// MarshalUnit marshals the unit into the string.
func MarshalUnit (unit Length )(string ,error ){switch _ceb :=unit .(type ){case Millimeter :return _cb .Sprintf ("\u0025\u002e\u0030\u0066\u006d\u006d",_ceb ),nil ;case Inch :return _cb .Sprintf ("\u0025\u002e\u0030\u0066\u0069\u006e",_ceb ),nil ;case Point :return _cb .Sprintf ("\u0025\u002e\u0030\u0066\u0070\u0074",_ceb ),nil ;
default:return "",_cb .Errorf ("i\u006e\u0076\u0061\u006cid\u0020u\u006e\u0069\u0074\u0020\u0074y\u0070\u0065\u003a\u0020\u0025\u0054",unit );};};

// MarshalPageSize marshals the page size into string.
func MarshalPageSize (p PageSize )(string ,error ){_gg ,_bgg :=p .MarshalText ();if _bgg !=nil {return "",_bgg ;};return string (_gg ),nil ;};

// UnmarshalJSON implements the json.Unmarshaler interface for PageSize
func (_cfag *PageSize )UnmarshalJSON (data []byte )error {var _ga string ;if _dca :=_d .Unmarshal (data ,&_ga );_dca !=nil {return _cb .Errorf ("P\u0061\u0067\u0065\u0053\u0069\u007ae\u0020\u0073\u0068\u006f\u0075\u006cd\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067\u002c\u0020\u0067\u006f\u0074\u0020%\u0073",data );
};var _dcce error ;*_cfag ,_dcce =PageSizeString (_ga );return _dcce ;};

// Inches gets the inches equivalent from provided millimeter value.
func (_dc Millimeter )Inches ()Inch {return Inch (float64 (_dc )*_e )};

// Type implements pflag.Value interface.
func (_fg Inch )Type ()string {return "\u0069\u006e\u0063\u0068"};

// MarshalJSON implements json.Marshaler interface.
func (_ge Point )MarshalJSON ()([]byte ,error ){return _ec (_ge )};

// LengthFlag is a pflag wrapper for the Length value.
type LengthFlag struct{Length Length ;};

// PageSize is the enum used for defining the page size.
type PageSize int ;var _cee =[]PageSize {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23};

// UnmarshalText implements the encoding.TextUnmarshaler interface for PageSize
func (_aeb *PageSize )UnmarshalText (text []byte )error {var _eea error ;*_aeb ,_eea =PageSizeString (string (text ));return _eea ;};

// Orientation is the page orientation type wrapper.
type Orientation bool ;

// Set implements pflag.Value interface.
func (_ffb *PageSize )Set (s string )error {_edb ,_bff :=UnmarshalPageSize (s );if _bff !=nil {return _bff ;};*_ffb =_edb ;return nil ;};

// Millimeters converts the inches value to the millimeters.
func (_fdef Point )Millimeters ()Millimeter {return Millimeter (float64 (_fdef )*_f )};

// Name implements viper.FlagValue interface.
func (_ead Point )Name ()string {return "\u0070\u006f\u0069n\u0074"};

// Type implements pflag.Value interface.
func (_fde Point )Type ()string {return "\u0070\u006f\u0069n\u0074"};func _gc (_def string )(Point ,error ){_def =_g .TrimSpace (_g .Trim (_def ,"\u0070\u0074"));_cfa ,_ee :=_c .ParseFloat (_def ,64);if _ee !=nil {return 0,_ee ;};return Point (_cfa ),nil ;
};

// ValueString implements pflag.Value interface.
func (_fd Inch )ValueString ()string {return _fd .String ()};func _ec (_ceg Length )([]byte ,error ){if _ceg ==nil {return nil ,nil ;};_gcf ,_gf :=MarshalUnit (_ceg );if _gf !=nil {return nil ,_gf ;};return []byte ("\u0022"+_gcf +"\u0022"),nil ;};const (_e =float64 (1)/float64 (25.4);
_cd =25.4;_dg =0.0139;_f =0.3528;_gb =1/64;_b =1/_f ;);

// ValueType implements pflag.Value interface.
func (_dcb Inch )ValueType ()string {return _dcb .Type ()};var (_ Length =Millimeter (0););

// String implements fmt.Stringer interface.
func (_cg Inch )String ()string {_cgf :=_g .Builder {};_cgf .WriteString (_c .FormatFloat (float64 (_cg ),'f',1,64));_cgf .WriteString ("\u0069\u006e");return _cgf .String ();};

// HasChanged implements viper.FlagValue interface.
func (_bcg *Point )HasChanged ()bool {return _bcg !=nil };func _fac (_ba string )(Inch ,error ){_ba =_g .TrimSpace (_g .Trim (_ba ,"\u0069\u006e"));_dad ,_cce :=_c .ParseFloat (_ba ,64);if _cce !=nil {return 0,_cb .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0069\u006e\u0063\u0068\u0020\u0076\u0061\u006c\u0075\u0065\u003a\u0020%\u0077",_cce );
};return Inch (_dad ),nil ;};

// PageSizeValues returns all values of the enum
func PageSizeValues ()[]PageSize {return _cee };

// Millimeters gets the float64 millimeter value.
func (_ed Millimeter )Millimeters ()Millimeter {return _ed };

// ValueString implements viper.FlagValue interface.
func (_fef Point )ValueString ()string {return _fef .String ()};

// MarshalJSON implements json.Marshaler interface
func (_fb Inch )MarshalJSON ()([]byte ,error ){return _ec (_fb )};var _bec =[...]uint8 {0,9,11,13,15,17,19,21,23,25,27,29,32,34,36,38,40,42,44,46,48,50,52,55,61};const _be ="U\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0041\u0030\u0041\u0031\u0041\u0032\u0041\u0033\u0041\u0034\u0041\u0035\u0041\u0036\u0041\u0037\u0041\u0038A\u0039A\u0031\u0030\u0042\u0030B\u0031\u00422\u0042\u0033\u0042\u0034\u0042\u0035\u0042\u0036\u0042\u0037\u0042\u0038\u0042\u0039\u0042\u0031\u0030\u004c\u0065\u0074\u0074\u0065\u0072";


// String implements fmt.Stringer interface.
func (_bc Millimeter )String ()string {_dag :=_g .Builder {};_dag .WriteString (_c .FormatFloat (float64 (_bc ),'f',1,64));_dag .WriteString ("\u006d\u006d");return _dag .String ();};const (Portrait =Orientation (false );Landscape =Orientation (true );
);

// Name implements pflag.Value interface.
func (_cbd Inch )Name ()string {return "\u0069\u006e\u0063\u0068"};var _aff =map[string ]PageSize {_be [0:9]:0,_be [9:11]:1,_be [11:13]:2,_be [13:15]:3,_be [15:17]:4,_be [17:19]:5,_be [19:21]:6,_be [21:23]:7,_be [23:25]:8,_be [25:27]:9,_be [27:29]:10,_be [29:32]:11,_be [32:34]:12,_be [34:36]:13,_be [36:38]:14,_be [38:40]:15,_be [40:42]:16,_be [42:44]:17,_be [44:46]:18,_be [46:48]:19,_be [48:50]:20,_be [50:52]:21,_be [52:55]:22,_be [55:61]:23};


// Point is a unit of Length commonly used to measure the height of fonts.
type Point float64 ;

// Inch is a unit that
type Inch float64 ;

// MarshalText implements the encoding.TextMarshaler interface for PageSize
func (_dac PageSize )MarshalText ()([]byte ,error ){return []byte (_dac .String ()),nil };

// UnmarshalLength unmarshalls string value into Length.
func UnmarshalLength (length string )(Length ,error ){if _g .HasSuffix (length ,"\u006d\u006d"){return _fc (length );};if _g .HasSuffix (length ,"\u0069\u006e"){return _fac (length );};if _g .HasSuffix (length ,"\u0070\u0074"){return _gc (length );};return nil ,_cb .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u0065\u006e\u0067\u0074h\u0020\u0069\u006e\u0070\u0075\u0074\u003a\u0020\u0025\u0073",length );
};

// PageSizeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PageSizeString (s string )(PageSize ,error ){if _ded ,_aeg :=_aff [s ];_aeg {return _ded ,nil ;};return 0,_cb .Errorf ("\u0025\u0073 \u0064\u006f\u0065\u0073 \u006e\u006ft\u0020\u0062\u0065\u006c\u006f\u006e\u0067\u0020t\u006f\u0020\u0050\u0061\u0067\u0065\u0053\u0069\u007a\u0065\u0020\u0076a\u006c\u0075\u0065\u0073",s );
};

// UnmarshalPageSize unmarshals the page size from the string.
func UnmarshalPageSize (pageSize string )(PageSize ,error ){var _ag PageSize ;if _cgg :=(&_ag ).UnmarshalText ([]byte (pageSize ));_cgg !=nil {return 0,_cb .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0070a\u0067\u0065\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0077",_cgg );
};return _ag ,nil ;};

// Set implements pflag.Value interface.
func (_af *Inch )Set (s string )error {_ea ,_dcf :=_c .ParseFloat (s ,64);if _dcf !=nil {return _cb .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0069\u006e\u0063\u0068\u0020\u0076\u0061\u006c\u0075\u0065\u003a\u0020%\u0077",_dcf );};*_af =Inch (_ea );
return nil ;};func (_cfde PageSize )String ()string {if _cfde < 0||_cfde >=PageSize (len (_bec )-1){return _cb .Sprintf ("\u0050\u0061\u0067e\u0053\u0069\u007a\u0065\u0028\u0025\u0064\u0029",_cfde );};return _be [_bec [_cfde ]:_bec [_cfde +1]];};var _ _aa .Value =(*Orientation )(nil );


// String implements fmt.Stringer interface.
func (_fdd Orientation )String ()string {if _fdd ==Portrait {return "\u0070\u006f\u0072\u0074\u0072\u0061\u0069\u0074";};return "\u006ca\u006e\u0064\u0073\u0063\u0061\u0070e";};

// Dimensions gets the dimensions of the given page size.
// If provided page size is not valid than the function returns 0 values.
func (_cba PageSize )Dimensions ()(_cgb ,_dccab Millimeter ){switch _cba {case A0 :return 841,1189;case A1 :return 594,841;case A2 :return 420,594;case A3 :return 297,420;case A4 :return 210,297;case A5 :return 148,210;case A6 :return 105,148;case A7 :return 74,105;
case A8 :return 52,74;case A9 :return 37,52;case A10 :return 26,37;case B0 :return 1000,1414;case B1 :return 707,1000;case B2 :return 500,707;case B3 :return 353,500;case B4 :return 250,353;case B5 :return 176,250;case B6 :return 125,176;case B7 :return 88,125;
case B8 :return 66,88;case B9 :return 44,62;case B10 :return 31,44;case Letter :return 215.9,279.4;};return _cgb ,_dccab ;};var _ _aa .Value =(*Point )(nil );

// Millimeter is the dimension unit that defines a millimeter.
type Millimeter float64 ;

// Inches gets the inch value. Implements Length interface.
func (_dcc Inch )Inches ()Inch {return _dcc };

// String implements fmt.Stringer interface.
func (_fdc Point )String ()string {_dcca :=_g .Builder {};_dcca .WriteString (_c .FormatFloat (float64 (_fdc ),'f',1,64));_dcca .WriteString ("\u0070\u0074");return _dcca .String ();};

// HasChanged implements pflag.Value interface.
func (_cc *Inch )HasChanged ()bool {return _cc !=nil };

// Millimeters converts the inches value to the millimeters.
func (_de Inch )Millimeters ()Millimeter {return Millimeter (float64 (_de )*_cd )};const (Undefined PageSize =iota ;A0 ;A1 ;A2 ;A3 ;A4 ;A5 ;A6 ;A7 ;A8 ;A9 ;A10 ;B0 ;B1 ;B2 ;B3 ;B4 ;B5 ;B6 ;B7 ;B8 ;B9 ;B10 ;Letter ;);func _fc (_fcf string )(Millimeter ,error ){_fcf =_g .TrimSpace (_g .TrimSuffix (_fcf ,"\u006d\u006d"));
_fba ,_ab :=_c .ParseFloat (_fcf ,64);if _ab !=nil {return 0,_cb .Errorf ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006d\u0069\u006c\u006c\u0069\u006d\u0065t\u0065r\u0020\u0076\u0061\u006c\u0075\u0065\u003a \u0025\u0077",_ab );};return Millimeter (_fba ),nil ;
};

// ValueType implements viper.FlagValue interface.
func (_fgd Point )ValueType ()string {return _fgd .Type ()};

// Type implements pflag.Value interface.
func (_cf *LengthFlag )Type ()string {return "\u0075\u006e\u0069\u0074"};

// UnmarshalInch unmarshalls provided string into unit.
func UnmarshalInch (unit string )(Inch ,error ){if _g .HasSuffix (unit ,"\u006d\u006d"){_ef ,_bb :=_fc (unit );if _bb !=nil {return 0,_bb ;};return _ef .Inches (),nil ;};if _g .HasSuffix (unit ,"\u0069\u006e"){return _fac (unit );};return 0,_cb .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0069\u006e\u0063\u0068\u0020\u0069\u006e\u0070\u0075\u0074\u003a\u0020%\u0073",unit );
};

// MarshalJSON implements json.Marshaler interface
func (_cfd Millimeter )MarshalJSON ()([]byte ,error ){return _ec (_cfd )};

// Inches gets the inch value. Implements Length interface.
func (_ff Point )Inches ()Inch {return Inch (float64 (_ff )*_dg )};

// Type implements pflag.Value interface.
func (_abe Orientation )Type ()string {return "o\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e";};

// Set sets the unit value.
// Implements pflag.Value interface.
func (_fa *LengthFlag )Set (s string )error {if s =="\u0075n\u0064\u0065\u0066\u0069\u006e\u0065d"{_fa .Length =nil ;return nil ;};_fe ,_df :=UnmarshalLength (s );if _df !=nil {return _df ;};_fa .Length =_fe ;return nil ;};

// MarshalJSON implements the json.Marshaler interface for PageSize
func (_cda PageSize )MarshalJSON ()([]byte ,error ){return _d .Marshal (_cda .String ())};