//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package sizes defines basic types that determines the size units i.e. lengths.
//
//
package sizes ;import (_gc "encoding/json";_c "flag";_bg "fmt";_a "github.com/pkg/errors";_e "strconv";_b "strings";);

// Orientation is the page orientation type wrapper.
type Orientation bool ;var _ _c .Value =(*Point )(nil );

// String implements fmt.Stringer interface.
func (_ad Inch )String ()string {_agf :=_b .Builder {};_agf .WriteString (_e .FormatFloat (float64 (_ad ),'f',1,64));_agf .WriteString ("\u0069\u006e");return _agf .String ();};

// Inches gets the inch value. Implements Length interface.
func (_af Inch )Inches ()Inch {return _af };

// Points implements Length interface.
func (_eg Inch )Points ()Point {return Point (float64 (_eg )*_fc )};func _gbg (_dffb string )(Millimeter ,error ){_dffb =_b .TrimSpace (_b .TrimSuffix (_dffb ,"\u006d\u006d"));_ed ,_dg :=_e .ParseFloat (_dffb ,64);if _dg !=nil {return 0,_a .Wrap (_dg ,"\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u0069\u006c\u006c\u0069m\u0065\u0074\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065");};return Millimeter (_ed ),nil ;};

// UnmarshalInch unmarshalls provided string into unit.
func UnmarshalInch (unit string )(Inch ,error ){if _b .HasSuffix (unit ,"\u006d\u006d"){_fa ,_adc :=_gbg (unit );if _adc !=nil {return 0,_adc ;};return _fa .Inches (),nil ;};if _b .HasSuffix (unit ,"\u0069\u006e"){return _ddc (unit );};return 0,_bg .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0069\u006e\u0063\u0068\u0020\u0069\u006e\u0070\u0075\u0074\u003a\u0020%\u0073",unit );};

// Set implements flag.Value interface.
func (_bbc *Point )Set (s string )error {_cgd ,_ead :=_e .ParseFloat (s ,64);if _ead !=nil {return _a .Wrap (_ead ,"\u0069n\u0076a\u006c\u0069\u0064\u0020\u0069n\u0063\u0068 \u0076\u0061\u006c\u0075\u0065");};*_bbc =Point (_cgd );return nil ;};const (Undefined PageSize =iota ;A0 ;A1 ;A2 ;A3 ;A4 ;A5 ;A6 ;A7 ;A8 ;A9 ;A10 ;B0 ;B1 ;B2 ;B3 ;B4 ;B5 ;B6 ;B7 ;B8 ;B9 ;B10 ;Letter ;);

// Point is a unit of Length commonly used to measure the height of fonts.
type Point float64 ;

// Name implements pflag.Value interface.
func (_gd Inch )Name ()string {return "\u0069\u006e\u0063\u0068"};func _ce (_bac string )(Point ,error ){_bac =_b .TrimSpace (_b .Trim (_bac ,"\u0070\u0074"));_be ,_gf :=_e .ParseFloat (_bac ,64);if _gf !=nil {return 0,_gf ;};return Point (_be ),nil ;};

// UnmarshalJSON implements the json.Unmarshaler interface for PageSize
func (_gae *PageSize )UnmarshalJSON (data []byte )error {var _geg string ;if _dfe :=_gc .Unmarshal (data ,&_geg );_dfe !=nil {return _bg .Errorf ("P\u0061\u0067\u0065\u0053\u0069\u007ae\u0020\u0073\u0068\u006f\u0075\u006cd\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067\u002c\u0020\u0067\u006f\u0074\u0020%\u0073",data );};var _fcab error ;*_gae ,_fcab =PageSizeString (_geg );return _fcab ;};

// Dimensions gets the dimensions of the given page size.
// If provided page size is not valid than the function returns 0 values.
func (_cdbf PageSize )Dimensions ()(_fgbe ,_feb Millimeter ){switch _cdbf {case A0 :return 841,1189;case A1 :return 594,841;case A2 :return 420,594;case A3 :return 297,420;case A4 :return 210,297;case A5 :return 148,210;case A6 :return 105,148;case A7 :return 74,105;case A8 :return 52,74;case A9 :return 37,52;case A10 :return 26,37;case B0 :return 1000,1414;case B1 :return 707,1000;case B2 :return 500,707;case B3 :return 353,500;case B4 :return 250,353;case B5 :return 176,250;case B6 :return 125,176;case B7 :return 88,125;case B8 :return 66,88;case B9 :return 44,62;case B10 :return 31,44;case Letter :return 215.9,279.4;};return _fgbe ,_feb ;};

// UnmarshalText implements the encoding.TextUnmarshaler interface for PageSize
func (_fbe *PageSize )UnmarshalText (text []byte )error {var _bdc error ;*_fbe ,_bdc =PageSizeString (string (text ));return _bdc ;};

// UnmarshalPageSize unmarshals the page size from the string.
func UnmarshalPageSize (pageSize string )(PageSize ,error ){var _fcfe PageSize ;if _adf :=(&_fcfe ).UnmarshalText ([]byte (pageSize ));_adf !=nil {return 0,_a .Wrap (_adf ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006ev\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0067\u0065\u0020s\u0069\u007a\u0065");};return _fcfe ,nil ;};

// Millimeter is the dimension unit that defines a millimeter.
type Millimeter float64 ;

// ValueType implements viper.FlagValue interface.
func (_eab Point )ValueType ()string {return _eab .Type ()};

// String implements fmt.Stringer interface.
func (_df Point )String ()string {_eb :=_b .Builder {};_eb .WriteString (_e .FormatFloat (float64 (_df ),'f',1,64));_eb .WriteString ("\u0070\u0074");return _eb .String ();};

// MarshalUnit marshals the unit into the string.
func MarshalUnit (unit Length )(string ,error ){switch _cgb :=unit .(type ){case Millimeter :return _bg .Sprintf ("\u0025\u002e\u0030\u0066\u006d\u006d",_cgb ),nil ;case Inch :return _bg .Sprintf ("\u0025\u002e\u0030\u0066\u0069\u006e",_cgb ),nil ;case Point :return _bg .Sprintf ("\u0025\u002e\u0030\u0066\u0070\u0074",_cgb ),nil ;default:return "",_bg .Errorf ("i\u006e\u0076\u0061\u006cid\u0020u\u006e\u0069\u0074\u0020\u0074y\u0070\u0065\u003a\u0020\u0025\u0054",unit );};};

// Set implements pflag.Value interface.
func (_fb *PageSize )Set (s string )error {_agfbd ,_gcg :=UnmarshalPageSize (s );if _gcg !=nil {return _gcg ;};*_fb =_agfbd ;return nil ;};

// String gets the string value for given flag.
func (_fg *LengthFlag )String ()string {if _fg .Length ==nil {return "\u0075n\u0064\u0065\u0066\u0069\u006e\u0065d";};return _fg .Length .String ();};var _ Length =Inch (0);

// Type implements pflag.Value interface.
func (_geb Point )Type ()string {return "\u0070\u006f\u0069n\u0074"};

// Points implements Length interface.
func (_aga Millimeter )Points ()Point {return Point (_aga *_gb )};

// Millimeters converts the inches value to the millimeters.
func (_cc Point )Millimeters ()Millimeter {return Millimeter (float64 (_cc )*_ag )};

// Set implements pflag.Value interface.
func (_ge *Inch )Set (s string )error {_d ,_cfc :=_e .ParseFloat (s ,64);if _cfc !=nil {return _a .Wrap (_cfc ,"\u0069n\u0076a\u006c\u0069\u0064\u0020\u0069n\u0063\u0068 \u0076\u0061\u006c\u0075\u0065");};*_ge =Inch (_d );return nil ;};

// Set implements flag.Value interface.
func (_dc *Orientation )Set (s string )error {switch s {case "\u0070\u006f\u0072\u0074\u0072\u0061\u0069\u0074":*_dc =Portrait ;case "\u006ca\u006e\u0064\u0073\u0063\u0061\u0070e":*_dc =Landscape ;default:return _bg .Errorf ("\u0069n\u0076\u0061\u006c\u0069d\u0020\u006f\u0072\u0069\u0065n\u0074a\u0074i\u006f\u006e\u003a\u0020\u0027\u0025\u0073'",s );};return nil ;};

// HasChanged implements pflag.Value interface.
func (_ff *Inch )HasChanged ()bool {return _ff !=nil };var _ _c .Value =(*Orientation )(nil );

// Inches gets the inches equivalent from provided millimeter value.
func (_baaa Millimeter )Inches ()Inch {return Inch (float64 (_baaa )*_ba )};

// Type implements pflag.Value interface.
func (_fgb Orientation )Type ()string {return "o\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e";};const (Portrait =Orientation (false );Landscape =Orientation (true ););

// HasChanged implements viper.FlagValue interface.
func (_de *Point )HasChanged ()bool {return _de !=nil };

// Points implements Length interface.
func (_bd Point )Points ()Point {return _bd };var _ffd =map[string ]PageSize {_bef [0:9]:0,_bef [9:11]:1,_bef [11:13]:2,_bef [13:15]:3,_bef [15:17]:4,_bef [17:19]:5,_bef [19:21]:6,_bef [21:23]:7,_bef [23:25]:8,_bef [25:27]:9,_bef [27:29]:10,_bef [29:32]:11,_bef [32:34]:12,_bef [34:36]:13,_bef [36:38]:14,_bef [38:40]:15,_bef [40:42]:16,_bef [42:44]:17,_bef [44:46]:18,_bef [46:48]:19,_bef [48:50]:20,_bef [50:52]:21,_bef [52:55]:22,_bef [55:61]:23};var _cge =[...]uint8 {0,9,11,13,15,17,19,21,23,25,27,29,32,34,36,38,40,42,44,46,48,50,52,55,61};func (_aff PageSize )String ()string {if _aff < 0||_aff >=PageSize (len (_cge )-1){return _bg .Sprintf ("\u0050\u0061\u0067e\u0053\u0069\u007a\u0065\u0028\u0025\u0064\u0029",_aff );};return _bef [_cge [_aff ]:_cge [_aff +1]];};var _ga =[]PageSize {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23};

// IsAPageSize returns "true" if the value is listed in the enum definition. "false" otherwise
func (_dfa PageSize )IsAPageSize ()bool {for _ ,_cee :=range _ga {if _dfa ==_cee {return true ;};};return false ;};

// LengthFlag is a pflag wrapper for the Length value.
type LengthFlag struct{Length Length ;};

// PageSizeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PageSizeString (s string )(PageSize ,error ){if _fge ,_gcc :=_ffd [s ];_gcc {return _fge ,nil ;};return 0,_bg .Errorf ("\u0025\u0073 \u0064\u006f\u0065\u0073 \u006e\u006ft\u0020\u0062\u0065\u006c\u006f\u006e\u0067\u0020t\u006f\u0020\u0050\u0061\u0067\u0065\u0053\u0069\u007a\u0065\u0020\u0076a\u006c\u0075\u0065\u0073",s );};

// MarshalJSON implements the json.Marshaler interface for PageSize
func (_ega PageSize )MarshalJSON ()([]byte ,error ){return _gc .Marshal (_ega .String ())};const _bef ="U\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0041\u0030\u0041\u0031\u0041\u0032\u0041\u0033\u0041\u0034\u0041\u0035\u0041\u0036\u0041\u0037\u0041\u0038A\u0039A\u0031\u0030\u0042\u0030B\u0031\u00422\u0042\u0033\u0042\u0034\u0042\u0035\u0042\u0036\u0042\u0037\u0042\u0038\u0042\u0039\u0042\u0031\u0030\u004c\u0065\u0074\u0074\u0065\u0072";

// ValueString implements pflag.Value interface.
func (_gea Inch )ValueString ()string {return _gea .String ()};const (_ba =float64 (1)/float64 (25.4);_f =25.4;_ae =0.0139;_ag =0.3528;_fc =1/64;_gb =1/_ag ;);var (_ Length =Millimeter (0););

// String implements fmt.Stringer interface.
func (_cd Millimeter )String ()string {_ea :=_b .Builder {};_ea .WriteString (_e .FormatFloat (float64 (_cd ),'f',1,64));_ea .WriteString ("\u006d\u006d");return _ea .String ();};

// Millimeters gets the float64 millimeter value.
func (_baa Millimeter )Millimeters ()Millimeter {return _baa };

// MarshalText implements the encoding.TextMarshaler interface for PageSize
func (_dbg PageSize )MarshalText ()([]byte ,error ){return []byte (_dbg .String ()),nil };

// Set sets the unit value.
// Implements pflag.Value interface.
func (_cf *LengthFlag )Set (s string )error {if s =="\u0075n\u0064\u0065\u0066\u0069\u006e\u0065d"{_cf .Length =nil ;return nil ;};_fe ,_fcf :=UnmarshalLength (s );if _fcf !=nil {return _fcf ;};_cf .Length =_fe ;return nil ;};

// Millimeters converts the inches value to the millimeters.
func (_agfb Inch )Millimeters ()Millimeter {return Millimeter (float64 (_agfb )*_f )};

// Type implements pflag.Value interface.
func (_bb *LengthFlag )Type ()string {return "\u0075\u006e\u0069\u0074"};func _ddc (_cdb string )(Inch ,error ){_cdb =_b .TrimSpace (_b .Trim (_cdb ,"\u0069\u006e"));_agb ,_fgf :=_e .ParseFloat (_cdb ,64);if _fgf !=nil {return 0,_a .Wrap (_fgf ,"\u0069n\u0076a\u006c\u0069\u0064\u0020\u0069n\u0063\u0068 \u0076\u0061\u006c\u0075\u0065");};return Inch (_agb ),nil ;};

// Name implements viper.FlagValue interface.
func (_egd Point )Name ()string {return "\u0070\u006f\u0069n\u0074"};

// MarshalPageSize marshals the page size into string.
func MarshalPageSize (p PageSize )(string ,error ){_cgdc ,_fbd :=p .MarshalText ();if _fbd !=nil {return "",_fbd ;};return string (_cgdc ),nil ;};

// PageSizeValues returns all values of the enum
func PageSizeValues ()[]PageSize {return _ga };

// ValueType implements pflag.Value interface.
func (_ab Inch )ValueType ()string {return _ab .Type ()};

// Length is it the default dimension unit.
type Length interface{Millimeters ()Millimeter ;Inches ()Inch ;Points ()Point ;String ()string ;};

// UnmarshalLength unmarshalls string value into Length.
func UnmarshalLength (length string )(Length ,error ){if _b .HasSuffix (length ,"\u006d\u006d"){return _gbg (length );};if _b .HasSuffix (length ,"\u0069\u006e"){return _ddc (length );};if _b .HasSuffix (length ,"\u0070\u0074"){return _ce (length );};return nil ,_bg .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u0065\u006e\u0067\u0074h\u0020\u0069\u006e\u0070\u0075\u0074\u003a\u0020\u0025\u0073",length );};

// PageSize is the enum used for defining the page size.
type PageSize int ;

// Type implements pflag.Value interface.
func (_faf PageSize )Type ()string {return "\u0070a\u0067\u0065\u002d\u0073\u0069\u007ae"};

// Type implements pflag.Value interface.
func (_dd Inch )Type ()string {return "\u0069\u006e\u0063\u0068"};

// String implements fmt.Stringer interface.
func (_db Orientation )String ()string {if _db ==Portrait {return "\u0070\u006f\u0072\u0074\u0072\u0061\u0069\u0074";};return "\u006ca\u006e\u0064\u0073\u0063\u0061\u0070e";};

// ValueString implements viper.FlagValue interface.
func (_bf Point )ValueString ()string {return _bf .String ()};

// Inches gets the inch value. Implements Length interface.
func (_afg Point )Inches ()Inch {return Inch (float64 (_afg )*_ae )};

// Inch is a unit that
type Inch float64 ;