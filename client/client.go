//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package client contains HTML Converter HTTP Client. The Client implements htmlcreator.HTMLConverter interface
// for the UniPDF module and can be used as a plugin for the UniPDF creator.Creator.
package client ;import (_ed "bytes";_f "context";_g "errors";_bb "fmt";_a "github.com/unidoc/unihtml/content";_d "github.com/unidoc/unihtml/sizes";_fgc "github.com/unidoc/unipdf/v3/common";_ce "golang.org/x/xerrors";_c "io/ioutil";_cg "net";_ge "net/http";_fg "net/url";_b "strconv";_fe "strings";_ef "time";);

// Validate checks if the QueryBuilder had no errors during composition and creation.
func (_da *QueryBuilder )Validate ()error {if _da ._bc !=nil {return _da ._bc ;};return _da ._fda .Validate ();};

// MarginBottom sets up the MarginBottom parameter for the query.
func (_dcd *QueryBuilder )MarginBottom (marginBottom _d .Length )*QueryBuilder {_dcd ._fda .PageParameters .MarginBottom =marginBottom ;return _dcd ;};

// MarginRight sets up the MarginRight parameter for the query.
func (_fee *QueryBuilder )MarginRight (marginRight _d .Length )*QueryBuilder {_fee ._fda .PageParameters .MarginRight =marginRight ;return _fee ;};

// Query gets the Query from provided query builder. If some error occurred during build process
// or the input is not valid the function would return an error.
func (_dg *QueryBuilder )Query ()(*Query ,error ){if _ea :=_dg .Validate ();_ea !=nil {return nil ,_ea ;};return &_dg ._fda ,nil ;};

// WithHostname sets the Hostname option for the client options.
func WithHostname (option string )Option {return func (_bce *Options ){_bce .Hostname =option }};

// SetContent sets custom data with it's content type.
func (_cgd *QueryBuilder )SetContent (content _a .Content )*QueryBuilder {if _cgd ._bc !=nil {return _cgd ;};if _cgd ._fda .ContentType !=""{_cgd ._bc =ErrContentTypeDeclared ;return _cgd ;};if content .ContentType ()==""{_cgd ._bc =_ce .Errorf ("\u0065\u006d\u0070\u0074y\u0020\u0063\u0075\u0073\u0074\u006f\u006d\u0020\u0063\u006fn\u0074e\u006e\u0074\u0020\u0074\u0079\u0070\u0065 \u0025\u0077",ErrContentType );return _cgd ;};_cgd ._fda .Data =content .Data ();_cgd ._fda .ContentType =content .ContentType ();return _cgd ;};

// Portrait sets up the portrait page orientation.
func (_fa *QueryBuilder )Portrait ()*QueryBuilder {_fa ._fda .PageParameters .Orientation =_d .Portrait ;return _fa ;};

// PDFResponse is the response used by the HTMLConverter.
type PDFResponse struct{ID string `json:"id"`;Data []byte `json:"data"`;};

// WithHTTPS sets the TLS option for the client options.
func WithHTTPS (useHTTPS bool )Option {return func (_cge *Options ){_cge .HTTPS =useHTTPS }};

// WithPort sets the Port option for the client options.
func WithPort (option int )Option {return func (_ecc *Options ){_ecc .Port =option }};

// New creates new client with provided options.
func New (o Options )*Client {o .DefaultTimeout =_ef .Second *30;if o .Port <=0{o .Port =8080;};if o .Hostname ==""{o .Hostname ="\u00312\u0037\u002e\u0030\u002e\u0030\u002e1";};var _fgf =&_ge .Transport {DialContext :(&_cg .Dialer {Timeout :5*_ef .Second }).DialContext ,TLSHandshakeTimeout :5*_ef .Second };_fgc .Log .Info ("\u0043l\u0069e\u006e\u0074\u0020\u0041\u0064\u0064\u0072\u003a\u0020\u0025\u0073",o .Addr ());return &Client {Options :o ,Client :&_ge .Client {Transport :_fgf ,Timeout :o .DefaultTimeout }};};func (_gad *Client )getRequest (_fde _f .Context ,_bg *Query )(*_ge .Request ,error ){_cgc :=_gad .Options .Addr ();_cgc =_bb .Sprintf ("\u0025\u0073\u002f\u0070\u0064\u0066",_cgc );_gg ,_efb :=_ge .NewRequest ("\u0050\u004f\u0053\u0054",_cgc ,_ed .NewReader (_bg .Data ));if _efb !=nil {return nil ,_efb ;};_gg .Header .Set ("\u0043\u006f\u006et\u0065\u006e\u0074\u002d\u0054\u0079\u0070\u0065",_bg .ContentType );_gg =_gg .WithContext (_fde );_gd :=_gg .URL .Query ();_dc :=_bg .PageParameters ;if _dc .PageSize !=nil {_gd .Set ("\u0070a\u0067\u0065\u002d\u0073\u0069\u007ae",_dc .PageSize .String ());};if _dc .PaperHeight !=nil {_gd .Set ("\u0070\u0061\u0070e\u0072\u002d\u0068\u0065\u0069\u0067\u0068\u0074",_dc .PaperHeight .String ());};if _dc .PaperWidth !=nil {_gd .Set ("p\u0061\u0070\u0065\u0072\u002d\u0077\u0069\u0064\u0074\u0068",_dc .PaperWidth .String ());};if _dc .MarginTop !=nil {_gd .Set ("\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u0074\u006f\u0070",_dc .MarginTop .String ());};if _dc .MarginBottom !=nil {_gd .Set ("\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u0062\u006f\u0074\u0074\u006f\u006d",_dc .MarginBottom .String ());};if _dc .MarginRight !=nil {_gd .Set ("\u006d\u0061\u0072g\u0069\u006e\u002d\u0072\u0069\u0067\u0068\u0074",_dc .MarginRight .String ());};if _dc .MarginLeft !=nil {_gd .Set ("m\u0061\u0072\u0067\u0069\u006e\u002d\u006c\u0065\u0066\u0074",_dc .MarginLeft .String ());};if _dc .Orientation ==_d .Landscape {_gd .Set ("o\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e",_dc .Orientation .String ());};_gg .URL .RawQuery =_gd .Encode ();return _gg ,nil ;};

// PageParameters are the query parameters used in the PDF generation.
type PageParameters struct{

// PaperWidth sets the width of the paper.
PaperWidth _d .Length `schema:"paper-width" json:"paperWidth"`;

// PaperHeight is the height of the output paper.
PaperHeight _d .Length `schema:"paper-height" json:"paperHeight"`;

// PageSize is the page size string.
PageSize *_d .PageSize `schema:"page-size" json:"pageSize"`;

// Orientation defines if the output should be in a landscape format.
Orientation _d .Orientation `schema:"orientation" json:"orientation"`;

// MarginTop sets up the Top Margin for the output.
MarginTop _d .Length `schema:"margin-top" json:"marginTop"`;

// MarginBottom sets up the Bottom Margin for the output.
MarginBottom _d .Length `schema:"margin-bottom" json:"marginBottom"`;

// MarginLeft sets up the Left Margin for the output.
MarginLeft _d .Length `schema:"margin-left" json:"marginLeft"`;

// MarginRight sets up the Right Margin for the output.
MarginRight _d .Length `schema:"margin-right" json:"marginRight"`;};

// Options are the client options used by the HTTP client.
type Options struct{HTTPS bool ;Hostname string ;Port int ;DefaultTimeout _ef .Duration ;Prefix string ;};

// Addr gets the HTTP address URI used by the http.Client.
func (_edc *Options )Addr ()string {_ac :=_fe .Builder {};_ac .WriteString ("\u0068\u0074\u0074\u0070");if _edc .HTTPS {_ac .WriteRune ('s');};_ac .WriteString ("\u003a\u002f\u002f");_ac .WriteString (_edc .Hostname );_ac .WriteRune (':');_ac .WriteString (_b .Itoa (_edc .Port ));if _edc .Prefix !=""{_ac .WriteString (_edc .Prefix );};return _ac .String ();};

// Client is a structure that is a HTTP client for the unihtml server.
type Client struct{Options Options ;Client *_ge .Client ;};

// WithDefaultTimeout sets the DefaultTimeout option for the client options.
func WithDefaultTimeout (option _ef .Duration )Option {return func (_dde *Options ){_dde .DefaultTimeout =option };};

// PageSize sets up the PageSize parameter for the query.
func (_gdd *QueryBuilder )PageSize (pageSize _d .PageSize )*QueryBuilder {_gdd ._fda .PageParameters .PageSize =&pageSize ;return _gdd ;};

// PaperHeight sets up the PaperHeight (in cm) parameter for the query.
func (_ega *QueryBuilder )PaperHeight (paperHeight _d .Length )*QueryBuilder {_ega ._fda .PageParameters .PaperHeight =paperHeight ;return _ega ;};

// Landscape sets up the landscape portrait orientation.
func (_db *QueryBuilder )Landscape ()*QueryBuilder {_db ._fda .PageParameters .Orientation =_d .Landscape ;return _db ;};

// WithPrefix sets the client prefix.
func WithPrefix (prefix string )Option {return func (_cd *Options ){_cd .Prefix =prefix }};

// MarginLeft sets up the MarginLeft parameter for the query.
func (_cbe *QueryBuilder )MarginLeft (marginLeft _d .Length )*QueryBuilder {_cbe ._fda .PageParameters .MarginLeft =marginLeft ;return _cbe ;};

// Query is a structure that contains query parameters and the content used for the HTMLConverter conversion process.
type Query struct{Data []byte ;ContentType string ;PageParameters PageParameters ;};

// ConvertHTML converts provided Query input into PDF file data.
// Implements creator.HTMLConverter interface.
func (_ga *Client )ConvertHTML (ctx _f .Context ,q *Query )(*PDFResponse ,error ){if _eg :=q .Validate ();_eg !=nil {return nil ,_eg ;};_bde ,_bf :=_ga .getRequest (ctx ,q );if _bf !=nil {return nil ,_bf ;};_fgc .Log .Trace ("\u0052\u0065\u0071\u0075\u0065\u0073\u0074 \u002d\u0020\u0025s\u0020\u002d\u0020\u0025s\u0025\u0073\u002c\u0020\u0048\u0065\u0061\u0064\u0065\u0072\u0073\u003a\u0020\u0025\u0076\u002c\u0020\u0051\u0075\u0065\u0072\u0079\u003a\u0020\u0025\u0076",_bde .Method ,_bde .URL .Hostname (),_bde .URL .Path ,_bde .Header ,_bde .URL .Query ());_egf ,_bf :=_ga .Client .Do (_bde );if _bf !=nil {return nil ,_bf ;};var _cf error ;switch _egf .StatusCode {case _ge .StatusNotFound :_cf =ErrNotFound ;case _ge .StatusBadRequest :_cf =ErrBadRequest ;case _ge .StatusNotImplemented :_cf =ErrNotImplemented ;case _ge .StatusCreated :default:_cf =ErrInternalError ;};_egg ,_bf :=_c .ReadAll (_egf .Body );if _bf !=nil &&_cf ==nil {return nil ,_bf ;};_fgc .Log .Trace ("\u005b\u0025\u0064]\u0020\u0025\u0073\u0020\u0025\u0073\u0025\u0073",_egf .StatusCode ,_bde .Method ,_bde .URL .Host ,_bde .URL .Path );if _cf !=nil {return nil ,_bb .Errorf ("\u0025\u0073\u0020%\u0077",string (_egg ),_cf );};_cb :=_egf .Header .Get ("\u0058\u002d\u004a\u006f\u0062\u002d\u0049\u0044");_fgc .Log .Trace ("\u0052\u0065\u0073\u0070\u006f\u006e\u0073\u0065\u0020I\u0044\u0020\u0025\u0073",_cb );return &PDFResponse {ID :_cb ,Data :_egg },nil ;};

// MarginTop sets up the MarginTop parameter for the query.
func (_ab *QueryBuilder )MarginTop (marginTop _d .Length )*QueryBuilder {_ab ._fda .PageParameters .MarginTop =marginTop ;return _ab ;};var (ErrNotFound =_g .New ("\u006eo\u0074\u0020\u0066\u006f\u0075\u006ed");ErrBadRequest =_g .New ("b\u0061\u0064\u0020\u0072\u0065\u0071\u0075\u0065\u0073\u0074");ErrNotImplemented =_g .New ("\u006eo\u0074 \u0069\u006d\u0070\u006c\u0065\u006d\u0065\u006e\u0074\u0065\u0064");ErrInternalError =_g .New ("i\u006e\u0074\u0065\u0072na\u006c \u0073\u0065\u0072\u0076\u0065r\u0020\u0065\u0072\u0072\u006f\u0072");ErrBadGateway =_g .New ("b\u0061\u0064\u0020\u0067\u0061\u0074\u0065\u0077\u0061\u0079"););

// PaperWidth sets up the PaperWidth (in cm) parameter for the query.
func (_dfa *QueryBuilder )PaperWidth (paperWidth _d .Length )*QueryBuilder {_dfa ._fda .PageParameters .PaperWidth =paperWidth ;return _dfa ;};var (ErrMissingData =_g .New ("\u006di\u0073s\u0069\u006e\u0067\u0020\u0069n\u0070\u0075t\u0020\u0064\u0061\u0074\u0061");ErrContentType =_g .New ("i\u006ev\u0061\u006c\u0069\u0064\u0020\u0063\u006f\u006et\u0065\u006e\u0074\u0020ty\u0070\u0065");ErrContentTypeDeclared =_g .New ("\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u0073 \u0061l\u0072\u0065\u0061\u0064\u0079\u0020\u0064\u0065\u0063\u006c\u0061\u0072\u0065\u0064"););

// QueryBuilder is the query that converts HTMLConverter defined data
type QueryBuilder struct{_fda Query ;_bc error ;};

// BuildHTMLQuery creates a Query builder that is supposed to create valid
func BuildHTMLQuery ()*QueryBuilder {return &QueryBuilder {}};

// ParseOptions parses options for the Client.
func ParseOptions (connectPath string )(Options ,error ){if !_fe .HasPrefix (connectPath ,"\u0068\u0074\u0074\u0070"){connectPath ="\u0068t\u0074\u0070\u003a\u002f\u002f"+connectPath ;};_af ,_ec :=_fg .Parse (connectPath );if _ec !=nil {return Options {},_ce .Errorf ("p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0075\u006e\u0069\u0068\u0074m\u006c\u002d\u0073\u0065\u0072\u0076\u0065\u0072\u0020\u0075r\u006c");};var _bd int ;if _af .Port ()!=""{_bd ,_ec =_b .Atoi (_af .Port ());if _ec !=nil {return Options {},_ce .Errorf ("\u0070\u0061\u0072si\u006e\u0067\u0020\u0070\u006f\u0072\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0077",_ec );};};return Options {Hostname :_af .Hostname (),Port :_bd ,HTTPS :_af .Scheme =="\u0068\u0074\u0074p\u0073",Prefix :_af .Path },nil ;};

// Validate checks if provided Query is valid.
func (_gdb *Query )Validate ()error {if len (_gdb .Data )==0{return ErrMissingData ;};if _gdb .ContentType ==""{return ErrContentType ;};if _ae :=_gdb .PageParameters .Validate ();_ae !=nil {return _ae ;};return nil ;};

// Orientation sets the page orientation for the Query.
func (_cec *QueryBuilder )Orientation (orientation _d .Orientation )*QueryBuilder {_cec ._fda .PageParameters .Orientation =orientation ;return _cec ;};

// Validate checks if the parameters are valid.
func (_ceb *PageParameters )Validate ()error {if _ceb .PaperWidth !=nil {if _ceb .PaperWidth .Millimeters ()< 0{return _g .New ("\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072\u0020\u0050\u0061\u0070\u0065\u0072\u0057id\u0074\u0068");};};if _ceb .PaperHeight !=nil {if _ceb .PaperHeight .Millimeters ()< 0{return _g .New ("\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0076a\u006c\u0075\u0065\u0020\u0066\u006f\u0072 \u0050\u0061\u0070\u0065\u0072\u0048\u0065\u0069\u0067\u0068\u0074");};};if _ceb .MarginTop !=nil {if _ceb .MarginTop .Millimeters ()< 0{return _g .New ("\u006e\u0065\u0067\u0061t\u0069\u0076\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006fr\u0020\u004d\u0061\u0072\u0067\u0069\u006eT\u006f\u0070");};};if _ceb .MarginBottom !=nil {if _ceb .MarginBottom .Millimeters ()< 0{return _g .New ("\u006e\u0065\u0067a\u0074\u0069\u0076\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0066o\u0072\u0020\u004d\u0061\u0072\u0067\u0069\u006e\u0042\u006f\u0074\u0074\u006f\u006d");};};if _ceb .MarginLeft !=nil {if _ceb .MarginLeft .Millimeters ()< 0{return _g .New ("\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072\u0020\u004d\u0061\u0072\u0067\u0069\u006eLe\u0066\u0074");};};if _ceb .MarginRight !=nil {if _ceb .MarginRight .Millimeters ()< 0{return _g .New ("\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0076a\u006c\u0075\u0065\u0020\u0066\u006f\u0072 \u004d\u0061\u0072\u0067\u0069\u006e\u0052\u0069\u0067\u0068\u0074");};};if _ceb .PageSize !=nil &&!_ceb .PageSize .IsAPageSize (){return _g .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0067\u0065 \u0073\u0069\u007a\u0065");};return nil ;};

// HealthCheck connects to the server and check the health status of the server.
func (_df *Client )HealthCheck (ctx _f .Context )error {_bda :=_df .Options .Addr ();_bda =_bb .Sprintf ("\u0025s\u002f\u0068\u0065\u0061\u006c\u0074h",_bda );_dd ,_fd :=_ge .NewRequest ("\u0047\u0045\u0054",_bda ,nil );if _fd !=nil {return _fd ;};_dd =_dd .WithContext (ctx );_ad ,_fd :=_df .Client .Do (_dd );if _fd !=nil {return _fd ;};switch _ad .StatusCode {case _ge .StatusOK :return nil ;case _ge .StatusNotFound :return ErrNotFound ;case _ge .StatusInternalServerError :return ErrInternalError ;case _ge .StatusBadGateway :return ErrBadGateway ;default:return ErrNotImplemented ;};};

// Err gets the error which could occur in the query.
func (_afe *QueryBuilder )Err ()error {return _afe ._bc };

// DefaultPageParameters creates default parameters.
func DefaultPageParameters ()PageParameters {return PageParameters {Orientation :_d .Portrait }};

// Option is a function that changes client options.
type Option func (_efg *Options );