//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package unihtml contains a plugin for the UniDoc.
package unihtml ;import (_bd "bytes";_c "context";_ff "errors";_cg "fmt";_bb "github.com/unidoc/unihtml/client";_ab "github.com/unidoc/unihtml/content";_cc "github.com/unidoc/unihtml/selector";_de "github.com/unidoc/unihtml/sizes";_dg "github.com/unidoc/unipdf/v3/common";
_aa "github.com/unidoc/unipdf/v3/common/license";_cgg "github.com/unidoc/unipdf/v3/creator";_bdd "github.com/unidoc/unipdf/v3/model";_ba "github.com/unidoc/unipdf/v3/render";_db "image";_b "image/color";_ca "math";_d "net/url";_af "os";_f "time";);

// SetMargins sets the Document Margins.
func (_gfb *Document )SetMargins (left ,right ,top ,bottom float64 ){_gfb ._fg .Left =_de .Point (left );_gfb ._fg .Right =_de .Point (right );_gfb ._fg .Top =_de .Point (top );_gfb ._fg .Bottom =_de .Point (bottom );_gfb ._ace =_cgg .PositionAbsolute ;
};

// GetPdfPages is a function that converts provided input content and
func (_dag *Document )GetPdfPages (ctx _c .Context )([]*_bdd .PdfPage ,error ){if _ga :=_dag .validate ();_ga !=nil {return nil ,_ga ;};return _dag .extract (ctx ,_dag ._e ,_dag ._gb ,_dag .getMargins ());};func (_fcc *Document )getMargins ()margins {_fbd :=_fcc ._fg ;
if _fcc ._ace .IsRelative (){_fbd .Top =_de .Millimeter (1);_fbd .Left =_de .Millimeter (1);_fbd .Bottom =_de .Millimeter (1);_fbd .Right =_de .Millimeter (1);return _fbd ;};if _fbd .Top ==nil {_fbd .Top =_de .Millimeter (10);};if _fbd .Bottom ==nil {_fbd .Bottom =_de .Millimeter (10);
};if _fbd .Left ==nil {_fbd .Left =_de .Millimeter (10);};if _fbd .Right ==nil {_fbd .Right =_de .Millimeter (10);};return _fbd ;};

// SetPageSize sets the page default size.
func (_dfg *Document )SetPageSize (pageSize _de .PageSize )error {if !pageSize .IsAPageSize (){return _ff .New ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006ev\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0067\u0065\u0020s\u0069\u007a\u0065");
};_dfg ._cb =pageSize ;_dfg ._ace =_cgg .PositionAbsolute ;return nil ;};func _be ()error {_dee :=_aa .GetLicenseKey ();if _dee ==nil {return _ff .New ("\u006e\u006f\u0020\u006cic\u0065\u006e\u0073\u0065\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");
};if !_dee .IsLicensed (){return _ff .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006f\u0072 \u006e\u006f\u0020\u006c\u0069\u0063\u0065n\u0073\u0065\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};return nil ;};

// SetPageWidth sets the page width for given document.
func (_bc *Document )SetPageWidth (pageWidth _de .Length )error {_bc ._e =pageWidth ;_bc ._ace =_cgg .PositionAbsolute ;return nil ;};var _fa *_bb .Client ;

// SetMarginRight sets the left margin.
func (_cfc *Document )SetMarginRight (margin _de .Length ){_cfc ._fg .Right =margin };

// TrimLastPageContent trims the last page content so that next creator blocks are located just at the end of given block.
func (_fadd *Document )TrimLastPageContent (){_fadd ._da =true };

// Connect creates UniHTML HTTP Client and tries to establish connection with the server.
func Connect (path string )error {if _abc :=_be ();_abc !=nil {return _abc ;};_fc ,_dd :=_bb .ParseOptions (path );if _dd !=nil {return _dd ;};_fa =_bb .New (_fc );_fad ,_afc :=_c .WithTimeout (_c .Background (),_f .Second *5);defer _afc ();if _dgg :=_fa .HealthCheck (_fad );
_dgg !=nil {return _dgg ;};return nil ;};

// SetMarginLeft sets the left margin.
func (_fgd *Document )SetMarginLeft (margin _de .Length ){_fgd ._fg .Left =margin };

// SetMarginTop sets the left margin.
func (_dc *Document )SetMarginTop (margin _de .Length ){_dc ._fg .Top =margin };func (_gfc *Document )extract (_cff _c .Context ,_eggd ,_gbaf _de .Length ,_geg margins )([]*_bdd .PdfPage ,error ){_ddad :=_bb .BuildHTMLQuery ().SetContent (_gfc ._ac ).PageSize (_gfc ._cb ).PaperWidth (_eggd ).PaperHeight (_gbaf ).Orientation (_gfc ._fag ).MarginLeft (_geg .Left ).MarginRight (_geg .Right ).MarginTop (_geg .Top ).MarginBottom (_geg .Bottom ).WaitTime (_gfc ._ec );
for _ ,_cad :=range _gfc ._dgf {_ddad .WaitReady (_cad .Selector ,_cad .By );};for _ ,_ad :=range _gfc ._dbc {_ddad .WaitVisible (_ad .Selector ,_ad .By );};_bg ,_ed :=_ddad .Query ();if _ed !=nil {return nil ,_ed ;};_cff ,_gdg :=_c .WithTimeout (_cff ,_f .Second *15);
defer _gdg ();_ffe ,_ed :=_fa .ConvertHTML (_cff ,_bg );if _ed !=nil {return nil ,_ed ;};_gec :=_bd .NewReader (_ffe .Data );_agd ,_ed :=_bdd .NewPdfReader (_gec );if _ed !=nil {return nil ,_ed ;};return _agd .PageList ,nil ;};

// GeneratePageBlocks implements creator.Drawable interface.
func (_cae *Document )GeneratePageBlocks (ctx _cgg .DrawContext )([]*_cgg .Block ,_cgg .DrawContext ,error ){if _gbd :=_cae .validate ();_gbd !=nil {return nil ,ctx ,_gbd ;};var _fb []*_cgg .Block ;_bddc :=_cae .getMargins ();_dfa ,_cgb :=_cae ._e ,_cae ._gb ;
if _cae ._ace .IsRelative (){_dfa ,_cgb =_de .Point (ctx .Width ),_de .Point (ctx .Height );ctx .X -=float64 (_bddc .Left .Points ());};_fca ,_afe :=_cae .extract (_c .Background (),_dfa ,_cgb ,_bddc );if _afe !=nil {return nil ,_cgg .DrawContext {},_afe ;
};for _gaa ,_ae :=range _fca {_ccc ,_ce :=_cgg .NewBlockFromPage (_ae );if _ce !=nil {return nil ,_cgg .DrawContext {},_ce ;};var _acd float64 ;if _cae ._da &&_gaa ==len (_fca )-1{_caa :=_ba .NewImageDevice ();_eb ,_dda :=_caa .Render (_ae );if _dda !=nil {return nil ,_cgg .DrawContext {},_dda ;
};_cbg ,_dda :=_ae .GetMediaBox ();if _dda !=nil {return nil ,_cgg .DrawContext {},_dda ;};_gd :=_f .Now ();_ebf :=_ccd (_eb );_acd =_cbg .Height ()*_ebf ;_dg .Log .Trace ("\u0054\u0072i\u006d\u006d\u0069\u006eg\u0020\u006ca\u0073\u0074\u0020\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u0020\u0070\u0061\u0067\u0065\u0020\u0074\u0061\u006b\u0065n\u003a\u0020\u0025\u0076",_f .Since (_gd ));
if _cae ._fg .Bottom !=nil {_acd -=float64 (_cae ._fg .Bottom .Points ());};if _acd < 0{_acd =0;};_dg .Log .Trace ("C\u0072\u006f\u0070\u0070\u0069\u006e\u0067\u0020\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u0027\u0073\u0020\u0070\u0061\u0067\u0065\u0020\u0025\u002e2\u0066 \u0070\u006f\u0069\u006et\u0073\u0020o\u0066\u0066\u0020\u0062\u006f\u0074\u0074\u006f\u006d\u0020\u006f\u0066\u0020\u006d\u0065\u0064\u0069\u0061\u0020\u0062\u006f\u0078\u000a",_acd );
};_ef ,_abca ,_ce :=_ccc .GeneratePageBlocks (ctx );if _ce !=nil {return nil ,_cgg .DrawContext {},_ce ;};ctx =_abca ;ctx .Y -=_acd ;if _gaa !=len (_fca )-1&&ctx .Y > (ctx .PageHeight -ctx .Margins .Bottom )*.95{ctx .X =ctx .Margins .Left ;ctx .Y =ctx .Margins .Top ;
ctx .Page ++;};_fb =append (_fb ,_ef ...);};return _fb ,ctx ,nil ;};

// ConnectOptions creates UniHTML HTTP Client and tries to establish connection with the server.
func ConnectOptions (o Options )error {_fa =_bb .New (_bb .Options {Hostname :o .Hostname ,Port :o .Port ,HTTPS :o .Secure });_g ,_gc :=_c .WithTimeout (_c .Background (),_f .Second *5);defer _gc ();if _cgf :=_fa .HealthCheck (_g );_cgf !=nil {return _cgf ;
};return nil ;};

// Options are the HTML Client options used for establishing the connection.
type Options struct{

// Hostname defines the hostname for the client. Default value: 'localhost'.
Hostname string ;

// Port defines the port at which the server works. Default value: '8080'
Port int ;

// Secure is the flag that states if the connection uses HTTPS protocol. Default Value: 'false'.
Secure bool ;

// Prefix is an option setting used when the server is working with the URI prefix. Default Value: ''.
Prefix string ;};

// WaitVisible waits for the provided selector to be ready.
// A selector might be  i.e.  `#example` for id  and `.example` for classes. The second parameter defines how to match given selector.
func (_dbg *Document )WaitVisible (sel string ,by ..._cc .ByType ){_gg :=_cc .BySearch ;if len (by )> 0{_gg =by [0];};_dbg ._dbc =append (_dbg ._dbc ,_bb .BySelector {Selector :sel ,By :_gg });};

// SetPos sets the absolute position. Changes object positioning to absolute.
func (_fbc *Document )SetPos (x ,y float64 ){_fbc ._ace =_cgg .PositionAbsolute ;_fbc ._cf =x ;_fbc ._fcd =y ;};var ErrNoClient =_ff .New ("\u0055n\u0069\u0048\u0054\u004d\u004c\u0020\u0063\u006c\u0069\u0065\u006et\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");
var _ _cgg .Drawable =(*Document )(nil );

// SetPageHeight sets the page height for given document.
func (_dfgb *Document )SetPageHeight (pageHeight _de .Length )error {_dfgb ._gb =pageHeight ;_dfgb ._ace =_cgg .PositionAbsolute ;return nil ;};

// ContainerComponent implements creator.containerElement interface.
func (_bag *Document )ContainerComponent (container _cgg .Drawable )(_cgg .Drawable ,error ){switch container .(type ){case *_cgg .Chapter :default:return nil ,_cg .Errorf ("\u0075\u006e\u0069\u0068t\u006d\u006c\u002e\u0044\u006f\u0063\u0075\u006d\u0065n\u0074\u0020\u0063\u0061\u006e\u0027\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0063\u006f\u006d\u0070\u006fn\u0065\u006e\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0025\u0054\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072",container );
};return _bag ,nil ;};

// SetLandscapeOrientation sets document landscape page orientation.
func (_fab *Document )SetLandscapeOrientation (){_fab ._fag =_de .Landscape };func (_dcg *Document )validate ()error {if _fa ==nil {return ErrNoClient ;};if _dcg ._ac ==nil {return ErrContentNotDefined ;};return nil ;};

// NewDocument creates new HTML Document used as an input for the creator.Drawable.
func NewDocument (path string )(*Document ,error ){_df :=&Document {};_cfe ,_bbf :=_d .Parse (path );if _bbf !=nil {return nil ,_bbf ;};switch _cfe .Scheme {case "\u0068\u0074\u0074\u0070","\u0068\u0074\u0074p\u0073":_df ._ac ,_bbf =_ab .NewWebURL (path );
if _bbf !=nil {return nil ,_bbf ;};return _df ,nil ;};_ecd ,_bbf :=_af .Stat (path );if _bbf !=nil {return nil ,_bbf ;};if !_ecd .IsDir (){_df ._ac ,_bbf =_ab .NewHTMLFile (path );}else {_df ._ac ,_bbf =_ab .NewZipDirectory (path );};if _bbf !=nil {return nil ,_bbf ;
};return _df ,nil ;};

// Document is HTML document wrapper that is used for extracting and converting HTML document into PDF pages.
type Document struct{_ac _ab .Content ;_fg margins ;_ace _cgg .Positioning ;_cf ,_fcd float64 ;_cb _de .PageSize ;_e ,_gb _de .Length ;_fag _de .Orientation ;_da bool ;_ec _f .Duration ;_dgf []_bb .BySelector ;_dbc []_bb .BySelector ;};func _ccd (_fagd _db .Image )float64 {_cge :=_fagd .Bounds ();
var (_fgc int ;_gba _b .Color ;_ge ,_fd ,_cfd uint32 ;);_aab ,_egg :=_cge .Min .X ,_cge .Max .Y -1;_gee :=_fagd .At (_aab ,_egg );_egd ,_fde ,_cba ,_ :=_gee .RGBA ();_bf :=_egd ==_ca .MaxUint16 &&_fde ==_ca .MaxUint16 &&_cba ==_ca .MaxUint16 ;for _egg =_cge .Max .Y -1;
_egg >=_cge .Min .Y ;_egg --{var _bdf bool ;for _aab =_cge .Min .X ;_aab < _cge .Max .X ;_aab ++{_gba =_fagd .At (_aab ,_egg );_ge ,_fd ,_cfd ,_ =_gba .RGBA ();if (_bf &&!(_ge ==_egd &&_fd ==_fde &&_cba ==_cfd ))||(!_bf &&(_ca .Abs (float64 (_ge )-float64 (_egd ))/float64 (_ca .MaxUint16 )> 0.03||_ca .Abs (float64 (_fd )-float64 (_fde ))/float64 (_ca .MaxUint16 )> 0.03||_ca .Abs (float64 (_cfd )-float64 (_cba ))/float64 (_ca .MaxUint16 )> 0.03)){_bdf =true ;
break ;};};if _bdf {break ;};_fgc =_egg ;};return float64 (_cge .Max .Y -_fgc )/float64 (_cge .Max .Y );};

// SetMarginBottom sets the left margin.
func (_cac *Document )SetMarginBottom (margin _de .Length ){_cac ._fg .Bottom =margin };type margins struct{Left ,Right ,Bottom ,Top _de .Length ;};

// WriteToFile writes the document to a file defined by the output path.
func (_eg *Document )WriteToFile (outputPath string )error {if _dgd :=_eg .validate ();_dgd !=nil {return _dgd ;};_cbgb :=_f .Second *20+_eg ._ec ;_efg ,_bbd :=_c .WithTimeout (_c .Background (),_cbgb );defer _bbd ();_ffd ,_gde :=_eg .extract (_efg ,_eg ._e ,_eg ._gb ,_eg .getMargins ());
if _gde !=nil {return _gde ;};_fcb :=_cgg .New ();for _ ,_ee :=range _ffd {if _gde =_fcb .AddPage (_ee );_gde !=nil {return _gde ;};};return _fcb .WriteToFile (outputPath );};

// WaitReady waits for the provided selector to be ready.
// A selector might be  i.e.  `#example` for id  and `.example` for classes. The second parameter defines how to match given selector.
func (_agg *Document )WaitReady (sel string ,by ..._cc .ByType ){_bcd :=_cc .BySearch ;if len (by )> 0{_bcd =by [0];};_agg ._dgf =append (_agg ._dgf ,_bb .BySelector {Selector :sel ,By :_bcd });};

// WaitTime sets the waiting time before the webpage is rendered to PDF.
func (_ag *Document )WaitTime (duration _f .Duration ){_ag ._ec =duration };var ErrContentNotDefined =_ff .New ("\u0068\u0074\u006d\u006c\u0020\u0064o\u0063\u0075\u006d\u0065\u006e\u0074\u0020\u0063\u006f\u006e\u0074\u0065\u006et\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
