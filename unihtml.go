//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package unihtml contains a plugin for the UniDoc.
package unihtml ;import (_ga "bytes";_c "context";_gc "errors";_d "fmt";_fg "github.com/unidoc/unihtml/client";_ce "github.com/unidoc/unihtml/content";_gb "github.com/unidoc/unihtml/sizes";_ca "github.com/unidoc/unipdf/v3/common/license";_gba "github.com/unidoc/unipdf/v3/creator";_caa "github.com/unidoc/unipdf/v3/model";_f "net/url";_b "os";_ba "time";);var _ _gba .Drawable =(*Document )(nil );var ErrNoClient =_gc .New ("\u0055n\u0069\u0048\u0054\u004d\u004c\u0020\u0063\u006c\u0069\u0065\u006et\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");

// Options are the HTML Client options used for establishing the connection.
type Options struct{

// Hostname defines the hostname for the client. Default value: 'localhost'.
Hostname string ;

// Port defines the port at which the server works. Default value: '8080'
Port int ;

// Secure is the flag that states if the connection uses HTTPS protocol. Default Value: 'false'.
Secure bool ;

// Prefix is an option setting used when the server is working with the URI prefix. Default Value: ''.
Prefix string ;};type margins struct{Left ,Right ,Bottom ,Top _gb .Length ;};func (_cee *Document )getMargins ()margins {_eac :=_cee ._gd ;if _cee ._fgd .IsRelative (){_eac .Top =_gb .Millimeter (0);_eac .Left =_gb .Millimeter (0);_eac .Bottom =_gb .Millimeter (0);_eac .Right =_gb .Millimeter (0);return _eac ;};if _eac .Top ==nil {_eac .Top =_gb .Millimeter (10);};if _eac .Bottom ==nil {_eac .Bottom =_gb .Millimeter (10);};if _eac .Left ==nil {_eac .Left =_gb .Millimeter (10);};if _eac .Right ==nil {_eac .Right =_gb .Millimeter (10);};return _eac ;};func (_eg *Document )extract (_cadc _c .Context ,_gbag ,_bgg _gb .Length ,_gdbc margins )([]*_caa .PdfPage ,error ){_ae :=_fg .BuildHTMLQuery ().SetContent (_eg ._dbg ).PageSize (_eg ._bdc ).PaperWidth (_gbag ).PaperHeight (_bgg ).Orientation (_eg ._fe ).MarginLeft (_gdbc .Left ).MarginRight (_gdbc .Right ).MarginTop (_gdbc .Top ).MarginBottom (_gdbc .Bottom );_bgge ,_cac :=_ae .Query ();if _cac !=nil {return nil ,_cac ;};_cadc ,_ggd :=_c .WithTimeout (_cadc ,_ba .Second *15);defer _ggd ();_eeg ,_cac :=_gf .ConvertHTML (_cadc ,_bgge );if _cac !=nil {return nil ,_cac ;};_geb :=_ga .NewReader (_eeg .Data );_ea ,_cac :=_caa .NewPdfReader (_geb );if _cac !=nil {return nil ,_cac ;};return _ea .PageList ,nil ;};

// SetMarginLeft sets the left margin.
func (_ff *Document )SetMarginLeft (margin _gb .Length ){_ff ._gd .Left =margin };var ErrContentNotDefined =_gc .New ("\u0068\u0074\u006d\u006c\u0020\u0064o\u0063\u0075\u006d\u0065\u006e\u0074\u0020\u0063\u006f\u006e\u0074\u0065\u006et\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");func _df ()error {_bd :=_ca .GetLicenseKey ();if _bd ==nil {return _gc .New ("\u006e\u006f\u0020\u006cic\u0065\u006e\u0073\u0065\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};if !_bd .IsLicensed (){return _gc .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006f\u0072 \u006e\u006f\u0020\u006c\u0069\u0063\u0065n\u0073\u0065\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};if !_bd .UniHTML {return _gc .New ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020l\u0069\u0063e\u006e\u0073\u0065\u0020\u0069\u0073 \u006e\u006f\u0074\u0020\u0076\u0061\u006c\u0069d\u0020\u0066\u006f\u0072\u0020\u0074\u0068\u0065\u0020U\u006e\u0069\u0048\u0054\u004d\u004c\u0020\u0065\u0078\u0074\u0065n\u0073\u0069\u006f\u006e.\u0020\u0056i\u0073i\u0074\u003a\u0020\u0068\u0074\u0074\u0070s\u003a/\u002f\u0077\u0077\u0077\u002e\u0075\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f\u0020\u0061\u006ed\u0020c\u006f\u006e\u0074\u0061\u0063\u0074\u0020\u0073\u0075\u0070\u0070\u006f\u0072t");};return nil ;};

// SetMarginRight sets the left margin.
func (_ed *Document )SetMarginRight (margin _gb .Length ){_ed ._gd .Right =margin };

// SetPos sets the absolute position. Changes object positioning to absolute.
func (_bdg *Document )SetPos (x ,y float64 ){_bdg ._fgd =_gba .PositionAbsolute ;_bdg ._fab =x ;_bdg ._ge =y ;};

// ConnectOptions creates UniHTML HTTP Client and tries to establish connection with the server.
func ConnectOptions (o Options )error {_gf =_fg .New (_fg .Options {Hostname :o .Hostname ,Port :o .Port ,HTTPS :o .Secure });_cad ,_fa :=_c .WithTimeout (_c .Background (),_ba .Second *5);defer _fa ();if _ec :=_gf .HealthCheck (_cad );_ec !=nil {return _ec ;};return nil ;};

// SetMarginBottom sets the left margin.
func (_bef *Document )SetMarginBottom (margin _gb .Length ){_bef ._gd .Bottom =margin };

// SetLandscapeOrientation sets document landscape page orientation.
func (_acb *Document )SetLandscapeOrientation (){_acb ._fe =_gb .Landscape };

// ChapterDraw implements creator.containerElement interface.
func (_fgf *Document )ContainerComponent (container _gba .Drawable )(_gba .Drawable ,error ){switch container .(type ){case *_gba .Chapter :default:return nil ,_d .Errorf ("\u0075\u006e\u0069\u0068t\u006d\u006c\u002e\u0044\u006f\u0063\u0075\u006d\u0065n\u0074\u0020\u0063\u0061\u006e\u0027\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0063\u006f\u006d\u0070\u006fn\u0065\u006e\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0025\u0054\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072",container );};return _fgf ,nil ;};func (_aeb *Document )validate ()error {if _gf ==nil {return ErrNoClient ;};if _aeb ._dbg ==nil {return ErrContentNotDefined ;};return nil ;};

// GeneratePageBlocks implements creator.Drawable interface.
func (_fc *Document )GeneratePageBlocks (ctx _gba .DrawContext )([]*_gba .Block ,_gba .DrawContext ,error ){if _de :=_fc .validate ();_de !=nil {return nil ,ctx ,_de ;};var _gdb []*_gba .Block ;_be :=_fc .getMargins ();_ced ,_gg :=_fc ._cd ,_fc ._cc ;if _fc ._fgd .IsRelative (){_ced ,_gg =_gb .Point (ctx .Width ),_gb .Point (ctx .Height );};_gcc ,_gdc :=_fc .extract (_c .Background (),_ced ,_gg ,_be );if _gdc !=nil {return nil ,_gba .DrawContext {},_gdc ;};for _fd ,_ecf :=range _gcc {_fcb ,_fdb :=_gba .NewBlockFromPage (_ecf );if _fdb !=nil {return nil ,_gba .DrawContext {},_fdb ;};_dc ,_ded ,_fdb :=_fcb .GeneratePageBlocks (ctx );if _fdb !=nil {return nil ,_gba .DrawContext {},_fdb ;};ctx =_ded ;if _fd !=len (_gcc )-1&&ctx .Y > (ctx .PageHeight -ctx .Margins .Bottom )*.95{ctx .X =ctx .Margins .Left ;ctx .Y =ctx .Margins .Top ;ctx .Page ++;};_gdb =append (_gdb ,_dc ...);};return _gdb ,ctx ,nil ;};

// SetPageWidth sets the page width for given document.
func (_cb *Document )SetPageWidth (pageWidth _gb .Length )error {_cb ._cd =pageWidth ;_cb ._fgd =_gba .PositionAbsolute ;return nil ;};

// SetPageHeight sets the page height for given document.
func (_def *Document )SetPageHeight (pageHeight _gb .Length )error {_def ._cc =pageHeight ;_def ._fgd =_gba .PositionAbsolute ;return nil ;};var _gf *_fg .Client ;

// SetMarginTop sets the left margin.
func (_eea *Document )SetMarginTop (margin _gb .Length ){_eea ._gd .Top =margin };

// Connect creates UniHTML HTTP Client and tries to establish connection with the server.
func Connect (path string )error {if _bb :=_df ();_bb !=nil {return _bb ;};_baa ,_db :=_fg .ParseOptions (path );if _db !=nil {return _db ;};_gf =_fg .New (_baa );_e ,_a :=_c .WithTimeout (_c .Background (),_ba .Second *5);defer _a ();if _ee :=_gf .HealthCheck (_e );_ee !=nil {return _ee ;};return nil ;};

// SetMargins sets the Document Margins.
func (_gab *Document )SetMargins (left ,right ,top ,bottom float64 ){_gab ._gd .Left =_gb .Point (left );_gab ._gd .Right =_gb .Point (right );_gab ._gd .Top =_gb .Point (top );_gab ._gd .Bottom =_gb .Point (bottom );_gab ._fgd =_gba .PositionAbsolute ;};

// Document is HTML document wrapper that is used for extracting and converting HTML document into PDF pages.
type Document struct{_dbg _ce .Content ;_gd margins ;_fgd _gba .Positioning ;_fab ,_ge float64 ;_bdc _gb .PageSize ;_cd ,_cc _gb .Length ;_fe _gb .Orientation ;};

// GetPdfPages is a function that converts provided input content and
func (_bf *Document )GetPdfPages (ctx _c .Context )([]*_caa .PdfPage ,error ){if _bg :=_bf .validate ();_bg !=nil {return nil ,_bg ;};return _bf .extract (ctx ,_bf ._cd ,_bf ._cc ,_bf .getMargins ());};

// SetPageSize sets the page default size.
func (_gbd *Document )SetPageSize (pageSize _gb .PageSize )error {if !pageSize .IsAPageSize (){return _gc .New ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006ev\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0067\u0065\u0020s\u0069\u007a\u0065");};_gbd ._bdc =pageSize ;_gbd ._fgd =_gba .PositionAbsolute ;return nil ;};

// NewDocument creates new HTML Document used as an input for the creator.Drawable.
func NewDocument (path string )(*Document ,error ){_da :=&Document {};_ac ,_dd :=_f .Parse (path );if _dd !=nil {return nil ,_dd ;};switch _ac .Scheme {case "\u0068\u0074\u0074\u0070","\u0068\u0074\u0074p\u0073":_da ._dbg ,_dd =_ce .NewWebURL (path );if _dd !=nil {return nil ,_dd ;};return _da ,nil ;};_cag ,_dd :=_b .Stat (path );if _dd !=nil {return nil ,_dd ;};if !_cag .IsDir (){_da ._dbg ,_dd =_ce .NewHTMLFile (path );}else {_da ._dbg ,_dd =_ce .NewZipDirectory (path );};if _dd !=nil {return nil ,_dd ;};return _da ,nil ;};