//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package content ;import (_a "archive/zip";_ab "bytes";_ef "encoding/json";_c "golang.org/x/xerrors";_b "io/ioutil";_f "net/url";_ed "os";_g "strings";);type zipDirectory struct{_edf _ab .Buffer ;_dg *_a .Writer ;};func (_ea *zipDirectory )zipPath (_bd ,_eg string )error {_efe ,_fc :=_b .ReadDir (_bd );if _fc !=nil {return _c .Errorf ("\u0072\u0065\u0061di\u006e\u0067\u0020\u0064\u0069\u0072\u0065\u0063\u0074o\u0072y\u003a \u0027%\u0073\u0027\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0077",_bd ,_fc );};_gf :=&_g .Builder {};for _ ,_fe :=range _efe {_fg ,_aa :=_ea .zipBasePaths (_fe ,_bd ,_eg ,_fe .IsDir (),_gf );if _fe .IsDir (){if _agg :=_ea .zipPath (_fg ,_aa );_agg !=nil {return _agg ;};continue ;};_be ,_gcd :=_b .ReadFile (_fg );if _gcd !=nil {return _gcd ;};_eag ,_gcd :=_ea ._dg .Create (_aa );if _gcd !=nil {return _gcd ;};if _ ,_gcd =_eag .Write (_be );_gcd !=nil {return _gcd ;};};return nil ;};

// NewWebURL creates new Content webURL for provided input URL path.
func NewWebURL (path string )(Content ,error ){if _ ,_efa :=_f .Parse (path );_efa !=nil {return nil ,_efa ;};type urlOutput struct{URL string `json:"url"`;};_ba :=urlOutput {URL :path };_ca ,_caa :=_ef .Marshal (_ba );if _caa !=nil {return nil ,_caa ;};return &webURL {_aga :path ,_ee :_ca },nil ;};

// Data implements Content interface.
func (_gg *htmFile )Data ()[]byte {return _gg ._gc .Bytes ()};

// Data implements Content interface.
func (_fa *zipDirectory )Data ()[]byte {return _fa ._edf .Bytes ()};

// Content is an interface used for putting the content into Client Query.
type Content interface{ContentType ()string ;Data ()[]byte ;};type webURL struct{_aga string ;_ee []byte ;};func (_fcf *zipDirectory )zipBasePaths (_bef _ed .FileInfo ,_bfa ,_gcb string ,_ggf bool ,_dge *_g .Builder )(string ,string ){_dge .WriteString (_bfa );if !_g .HasSuffix (_bfa ,"\u002f"){_dge .WriteRune ('/');};_dge .WriteString (_bef .Name ());if _ggf {_dge .WriteRune ('/');};_da :=_dge .String ();_dge .Reset ();_dge .WriteString (_gcb );_dge .WriteString (_bef .Name ());if _ggf {_dge .WriteRune ('/');};_agf :=_dge .String ();_dge .Reset ();return _da ,_agf ;};

// Data implements Content interface.
func (_ff *webURL )Data ()[]byte {return _ff ._ee };

// ContentType implements Content interface.
func (_ae *zipDirectory )ContentType ()string {return "\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u007a\u0069\u0070";};type htmFile struct{_gc _ab .Buffer };

// NewZipDirectory creates new zip compressed file that recursively reads the directory at the 'dirPath'
// and stores in it's in-memory buffer.
func NewZipDirectory (dirPath string )(Content ,error ){_bc :=&zipDirectory {_edf :_ab .Buffer {}};_bc ._dg =_a .NewWriter (&_bc ._edf );if _fd :=_bc .zipPath (dirPath ,"");_fd !=nil {return nil ,_fd ;};if _eeg :=_bc ._dg .Close ();_eeg !=nil {return nil ,_eeg ;};return _bc ,nil ;};

// ContentType implements Content interface.
func (_abf *htmFile )ContentType ()string {return "\u0074e\u0078\u0074\u002f\u0068\u0074\u006dl"};

// ContentType implements Content interface.
func (_ga *webURL )ContentType ()string {return "\u0061\u0070p\u006c\u0069\u0063a\u0074\u0069\u006f\u006e\u002f\u006a\u0073\u006f\u006e";};

// NewHTMLFile creates new Content htmFile for provided input path.
func NewHTMLFile (path string )(Content ,error ){_d ,_ag :=_ed .Open (path );if _ag !=nil {return nil ,_ag ;};_bf :=&htmFile {_gc :_ab .Buffer {}};if _ ,_ag =_bf ._gc .ReadFrom (_d );_ag !=nil {return nil ,_ag ;};return _bf ,nil ;};